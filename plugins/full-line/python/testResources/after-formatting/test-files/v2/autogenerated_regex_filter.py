import abc
import re
from typing import List, Type, Optional
from data_processing.datapoint import CodeDataPoint
from data_processing.processors.abstract_processor import ProcessorBase
class AutogeneratedRegexFilterBase(ProcessorBase):⇥__BAD_TEXT_REGEX = re.compile(r"auto[- ]?generated file", flags=re.IGNORECASE)
__BAD_FILENAME_REGEX = re.compile(r"^.*[\d]+_auto.*$", flags=re.IGNORECASE)
def _filter(self, dp: CodeDataPoint) -> Optional[CodeDataPoint]:⇥return (⇥dp
if not re.search(self.__BAD_TEXT_REGEX, dp.content)
and not re.search(self.__BAD_FILENAME_REGEX, dp.filepath)
else None⇤)⇤@abc.abstractmethod
def _process(self, dp: CodeDataPoint) -> Optional[CodeDataPoint]:⇥raise NotImplementedError⇤@staticmethod
def is_deterministic() -> bool:⇥return True⇤@staticmethod
def is_slow() -> bool:⇥return False⇤@staticmethod
def must_be_after() -> List[Type[ProcessorBase]]:⇥return []⇤@staticmethod
def must_be_before() -> List[Type[ProcessorBase]]:⇥return []⇤⇤class AutogeneratedRegexFilterTrainData(AutogeneratedRegexFilterBase):⇥def _process(self, dp: CodeDataPoint) -> Optional[CodeDataPoint]:⇥return self._filter(dp)⇤⇤class AutogeneratedRegexFilterTrainModel(AutogeneratedRegexFilterBase):⇥def _process(self, dp: CodeDataPoint) -> Optional[CodeDataPoint]:⇥return self._filter(dp)⇤⇤class AutogeneratedRegexFilterInference(AutogeneratedRegexFilterBase):⇥def _process(self, dp: CodeDataPoint) -> Optional[CodeDataPoint]:⇥return dp⇤⇤